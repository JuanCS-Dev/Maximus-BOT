generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                String             @id
  name              String
  iconUrl           String?
  locale            String             @default("pt-BR")
  prefix            String             @default("!")
  joinedAt          DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  archivedAuditLogs ArchivedAuditLog[]
  auditLogs         AuditLog[]
  customCommands    CustomCommand[]
  settings          GuildSettings?
  incidentCases     IncidentCase[]
  reactionRoles     ReactionRole[]
  threatDetections  ThreatDetection[]
  warnings          Warning[]
  users             User[]             @relation("GuildToUser")

  @@map("guilds")
}

model GuildSettings {
  id                     String   @id @default(cuid())
  guildId                String   @unique
  modLogChannelId        String?
  muteRoleId             String?
  autoModEnabled         Boolean  @default(false)
  antiSpamEnabled        Boolean  @default(false)
  antiRaidEnabled        Boolean  @default(false)
  maxWarnings            Int      @default(3)
  profanityFilterEnabled Boolean  @default(false)
  linkFilterEnabled      Boolean  @default(false)
  inviteFilterEnabled    Boolean  @default(false)
  maxMentions            Int      @default(5)
  maxEmojis              Int      @default(10)
  spamThreshold          Int      @default(5)
  welcomeChannelId       String?
  welcomeMessage         String?
  goodbyeChannelId       String?
  goodbyeMessage         String?
  autoRoleEnabled        Boolean  @default(false)
  autoRoleId             String?
  logMessageDelete       Boolean  @default(true)
  logMessageEdit         Boolean  @default(true)
  logMemberJoin          Boolean  @default(true)
  logMemberLeave         Boolean  @default(true)
  logMemberUpdate        Boolean  @default(true)
  logChannelCreate       Boolean  @default(true)
  logChannelDelete       Boolean  @default(true)
  logRoleCreate          Boolean  @default(true)
  logRoleDelete          Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  guild                  Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@map("guild_settings")
}

model User {
  id            String     @id
  username      String
  discriminator String
  avatarUrl     String?
  isBot         Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  auditLogs     AuditLog[]
  warnings      Warning[]
  guilds        Guild[]    @relation("GuildToUser")

  @@map("users")
}

model Warning {
  id           String    @id @default(cuid())
  userId       String
  guildId      String
  reason       String
  moderatorId  String
  moderatorTag String
  active       Boolean   @default(true)
  clearedAt    DateTime?
  clearedBy    String?
  createdAt    DateTime  @default(now())
  guild        Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, guildId])
  @@index([guildId])
  @@map("warnings")
}

model CustomCommand {
  id              String   @id @default(cuid())
  guildId         String
  trigger         String
  response        String
  isEmbed         Boolean  @default(false)
  embedColor      String?
  embedTitle      String?
  requiredRole    String?
  allowedChannels String[] @default([])
  useCount        Int      @default(0)
  createdAt       DateTime @default(now())
  createdBy       String
  updatedAt       DateTime @updatedAt
  updatedBy       String?
  guild           Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@unique([guildId, trigger])
  @@index([guildId])
  @@map("custom_commands")
}

model ReactionRole {
  id            String   @id @default(cuid())
  guildId       String
  channelId     String
  messageId     String   @unique
  roleMapping   Json
  maxRoles      Int?
  removeOnReact Boolean  @default(false)
  createdAt     DateTime @default(now())
  createdBy     String
  guild         Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@map("reaction_roles")
}

model AuditLog {
  id           String      @id @default(cuid())
  guildId      String
  targetUserId String
  action       AuditAction
  moderatorId  String
  moderatorTag String
  reason       String?
  metadata     Json?
  createdAt    DateTime    @default(now())
  guild        Guild       @relation(fields: [guildId], references: [id], onDelete: Cascade)
  targetUser   User        @relation(fields: [targetUserId], references: [id], onDelete: Cascade)

  @@index([guildId])
  @@index([targetUserId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model ArchivedAuditLog {
  id                 String    @id @default(cuid())
  guildId            String
  discordAuditLogId  String    @unique
  actionType         String
  actorId            String?
  actorTag           String?
  targetId           String?
  targetTag          String?
  reason             String?
  changes            Json?
  chainOfCustodyHash String    @unique
  exportedToSIEM     Boolean   @default(false)
  siemExportDate     DateTime?
  createdAt          DateTime
  guild              Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId, actionType, createdAt])
  @@index([chainOfCustodyHash])
  @@map("archived_audit_logs")
}

model ThreatDetection {
  id          String   @id @default(cuid())
  guildId     String
  messageId   String?
  userId      String
  username    String
  threatType  String
  threatScore Int
  ioc         String?
  mispEventId String?
  openCTIId   String?
  actionTaken String
  metadata    Json?
  createdAt   DateTime @default(now())
  guild       Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId, createdAt])
  @@index([threatType, threatScore])
  @@map("threat_detections")
}

model IncidentCase {
  id               String    @id @default(cuid())
  guildId          String
  incidentType     String
  severity         String
  status           String
  channelId        String
  assignedAnalyst  String?
  relatedThreats   String[]
  timeline         Json
  externalTicketId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  closedAt         DateTime?
  guild            Guild     @relation(fields: [guildId], references: [id], onDelete: Cascade)

  @@index([guildId, status, severity])
  @@map("incident_cases")
}

model UserLevel {
  id              String    @id @default(cuid())
  userId          String
  guildId         String
  xp              Int       @default(0)
  level           Int       @default(1)
  totalMessages   Int       @default(0)
  totalVoiceTime  Int       @default(0)
  lastMessageAt   DateTime?
  lastVoiceJoinAt DateTime?
  messageStreak   Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([userId, guildId])
  @@index([guildId, level])
  @@index([guildId, xp])
  @@map("user_levels")
}

model Badge {
  id           String      @id @default(cuid())
  name         String
  description  String
  emoji        String
  rarity       String
  category     String
  requirements Json
  xpBonus      Int         @default(0)
  roleReward   String?
  createdAt    DateTime    @default(now())
  userBadges   UserBadge[]

  @@map("badges")
}

model UserBadge {
  id         String   @id @default(cuid())
  userId     String
  guildId    String
  badgeId    String
  unlockedAt DateTime @default(now())
  showcased  Boolean  @default(false)
  badge      Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, guildId, badgeId])
  @@index([userId, guildId])
  @@map("user_badges")
}

model Leaderboard {
  id             String   @id @default(cuid())
  guildId        String
  userId         String
  username       String
  rank           Int
  xp             Int
  level          Int
  totalMessages  Int
  totalVoiceTime Int
  period         String
  periodStart    DateTime
  periodEnd      DateTime
  createdAt      DateTime @default(now())

  @@unique([guildId, userId, period, periodStart])
  @@index([guildId, period, rank])
  @@map("leaderboards")
}

enum AuditAction {
  BAN
  UNBAN
  KICK
  MUTE
  UNMUTE
  WARN
  CLEAR_WARNINGS
  TIMEOUT
  PURGE
  LOCKDOWN
  UNLOCK
  ROLE_ADD
  ROLE_REMOVE
  NICK_CHANGE
}
