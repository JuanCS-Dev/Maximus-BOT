// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// GUILD (SERVER) CONFIGURATION
// ========================================

model Guild {
  id              String          @id // Discord Guild ID
  name            String
  iconUrl         String?
  locale          String          @default("pt-BR")
  prefix          String          @default("!")

  // Relations
  settings        GuildSettings?
  users           User[]
  warnings        Warning[]
  customCommands  CustomCommand[]
  reactionRoles   ReactionRole[]
  auditLogs       AuditLog[]

  // Timestamps
  joinedAt        DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("guilds")
}

// ========================================
// GUILD SETTINGS
// ========================================

model GuildSettings {
  id                  String   @id @default(cuid())
  guildId             String   @unique
  guild               Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Moderation Settings
  modLogChannelId     String?
  muteRoleId          String?
  autoModEnabled      Boolean  @default(false)
  antiSpamEnabled     Boolean  @default(false)
  antiRaidEnabled     Boolean  @default(false)
  maxWarnings         Int      @default(3)

  // Auto-Moderation Settings
  profanityFilterEnabled  Boolean  @default(false)
  linkFilterEnabled       Boolean  @default(false)
  inviteFilterEnabled     Boolean  @default(false)
  maxMentions             Int      @default(5)
  maxEmojis               Int      @default(10)
  spamThreshold           Int      @default(5) // messages in 5 seconds

  // Welcome/Goodbye
  welcomeChannelId    String?
  welcomeMessage      String?
  goodbyeChannelId    String?
  goodbyeMessage      String?

  // Auto-Role
  autoRoleEnabled     Boolean  @default(false)
  autoRoleId          String?

  // Logging
  logMessageDelete    Boolean  @default(true)
  logMessageEdit      Boolean  @default(true)
  logMemberJoin       Boolean  @default(true)
  logMemberLeave      Boolean  @default(true)
  logMemberUpdate     Boolean  @default(true)
  logChannelCreate    Boolean  @default(true)
  logChannelDelete    Boolean  @default(true)
  logRoleCreate       Boolean  @default(true)
  logRoleDelete       Boolean  @default(true)

  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("guild_settings")
}

// ========================================
// USERS
// ========================================

model User {
  id              String     @id // Discord User ID
  username        String
  discriminator   String
  avatarUrl       String?
  isBot           Boolean    @default(false)

  // Relations
  guilds          Guild[]
  warnings        Warning[]
  auditLogs       AuditLog[]

  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("users")
}

// ========================================
// WARNINGS
// ========================================

model Warning {
  id              String     @id @default(cuid())

  // Relations
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  guildId         String
  guild           Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Warning Data
  reason          String
  moderatorId     String
  moderatorTag    String

  // Status
  active          Boolean    @default(true)
  clearedAt       DateTime?
  clearedBy       String?

  // Timestamps
  createdAt       DateTime   @default(now())

  @@map("warnings")
  @@index([userId, guildId])
  @@index([guildId])
}

// ========================================
// CUSTOM COMMANDS
// ========================================

model CustomCommand {
  id              String     @id @default(cuid())

  // Relations
  guildId         String
  guild           Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Command Data
  trigger         String
  response        String
  isEmbed         Boolean    @default(false)
  embedColor      String?
  embedTitle      String?

  // Permissions
  requiredRole    String?
  allowedChannels String[]   @default([])

  // Statistics
  useCount        Int        @default(0)

  // Timestamps
  createdAt       DateTime   @default(now())
  createdBy       String
  updatedAt       DateTime   @updatedAt
  updatedBy       String?

  @@map("custom_commands")
  @@unique([guildId, trigger])
  @@index([guildId])
}

// ========================================
// REACTION ROLES
// ========================================

model ReactionRole {
  id              String     @id @default(cuid())

  // Relations
  guildId         String
  guild           Guild      @relation(fields: [guildId], references: [id], onDelete: Cascade)

  // Message Data
  channelId       String
  messageId       String

  // Role Mapping (JSON: { "emoji": "roleId" })
  roleMapping     Json

  // Options
  maxRoles        Int?       // null = unlimited
  removeOnReact   Boolean    @default(false) // Remove other roles when reacting

  // Timestamps
  createdAt       DateTime   @default(now())
  createdBy       String

  @@map("reaction_roles")
  @@unique([messageId])
  @@index([guildId])
}

// ========================================
// AUDIT LOGS (Moderation Actions)
// ========================================

enum AuditAction {
  BAN
  UNBAN
  KICK
  MUTE
  UNMUTE
  WARN
  CLEAR_WARNINGS
  TIMEOUT
  PURGE
  LOCKDOWN
  UNLOCK
  ROLE_ADD
  ROLE_REMOVE
  NICK_CHANGE
}

model AuditLog {
  id              String       @id @default(cuid())

  // Relations
  guildId         String
  guild           Guild        @relation(fields: [guildId], references: [id], onDelete: Cascade)
  targetUserId    String
  targetUser      User         @relation(fields: [targetUserId], references: [id], onDelete: Cascade)

  // Action Data
  action          AuditAction
  moderatorId     String
  moderatorTag    String
  reason          String?

  // Additional Data (JSON for flexibility)
  metadata        Json?

  // Timestamps
  createdAt       DateTime     @default(now())

  @@map("audit_logs")
  @@index([guildId])
  @@index([targetUserId])
  @@index([action])
  @@index([createdAt])
}
