apiVersion: apps/v1
kind: Deployment
metadata:
  name: discord-bot-vertice
  namespace: discord-bot
  labels:
    app: discord-bot
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discord-bot
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: discord-bot
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: discord-bot-sa
      terminationGracePeriodSeconds: 60

      # Force pod to run on the optimized node pool
      nodeSelector:
        cloud.google.com/gke-nodepool: discord-bot-pool-optimized

      containers:
      # Main bot container
      - name: bot
        image: us-central1-docker.pkg.dev/projeto-vertice/vertice-discord-bot/bot:latest
        imagePullPolicy: Always

        env:
        # From ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: NODE_ENV
        - name: BOT_PREFIX
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: BOT_PREFIX
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: METRICS_ENABLED
        - name: METRICS_PORT
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: METRICS_PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: LOG_LEVEL
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: discord-bot-config
              key: PORT

        # From Secrets
        - name: DISCORD_TOKEN
          valueFrom:
            secretKeyRef:
              name: discord-secrets
              key: token
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: discord-secrets
              key: client-id
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-config
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-config
              key: url
        - name: VIRUSTOTAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: discord-secrets
              key: virustotal-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: discord-secrets
              key: anthropic-api-key

        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Startup probe (for slow starts)
        startupProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12  # 2 minutes total

        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "500m"

        # Security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false  # Prisma needs write access for generated client

      # Cloud SQL Proxy sidecar
      - name: cloud-sql-proxy
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.0
        args:
          - "--structured-logs"
          - "--port=5432"
          - "--health-check"
          - "--http-port=9091"
          - "projeto-vertice:us-central1:vertice-bot-db"

        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        - containerPort: 9091
          name: proxy-health
          protocol: TCP

        livenessProbe:
          httpGet:
            path: /liveness
            port: 9091
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /readiness
            port: 9091
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5

        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"

        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
