name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: projeto-vertice
  REGION: us-central1
  SERVICE_NAME: vertice-discord-bot
  REPOSITORY: vertice-discord-bot

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:${{ github.sha }} .
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:${{ github.sha }} \
                     ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:${{ github.sha }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:latest

      - name: Run Prisma migrations
        run: |
          echo "Migrations will be run via Cloud Build step"
          echo "Skipping direct migration from GitHub Actions"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:${{ github.sha }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=1 \
            --max-instances=1 \
            --memory=2Gi \
            --cpu=1 \
            --timeout=3600 \
            --port=8080 \
            --set-env-vars=NODE_ENV=production,BOT_PREFIX=!,SHARD_COUNT=auto,METRICS_ENABLED=true,METRICS_PORT=9090 \
            --set-secrets=DISCORD_TOKEN=discord-token:latest,DATABASE_URL=database-url:latest,REDIS_URL=redis-url:latest,ANTHROPIC_API_KEY=anthropic-api-key:latest,GOOGLE_SAFE_BROWSING_API_KEY=google-safe-browsing-key:latest,VIRUSTOTAL_API_KEY=virustotal-api-key:latest,VERTICE_API_KEY=vertice-api-key:latest \
            --vpc-connector=vertice-connector \
            --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:vertice-bot-db

      - name: Verify deployment
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "Service deployed at: $SERVICE_URL"
          echo "Testing health endpoint..."
          sleep 10
          curl -f "$SERVICE_URL/health" || echo "Health check failed"

      - name: Create deployment summary
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** $SERVICE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/bot:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
